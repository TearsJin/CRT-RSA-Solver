

# This file was *autogenerated* from the file test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3); _sage_const_1024 = Integer(1024); _sage_const_0p3 = RealNumber('0.3'); _sage_const_0p05 = RealNumber('0.05')
from Crypto.Util.number import *
from random import getrandbits,randrange

def keyGen(Nbits, beta, delta):
    while True:
        try:
            while True:
                pbit = int(beta * Nbits)
                qbit = Nbits - pbit
                p = getPrime(pbit)
                q = getPrime(qbit)
                if p > q:
                    p,q = q,p
                if gcd(p-_sage_const_1 ,q-_sage_const_1 ) == _sage_const_2 :
                    break
            N = Integer(p * q)
            dq = getPrime(int(Nbits * delta))
            dp = randrange(_sage_const_0 ,p-_sage_const_1 )
            d = crt([dp,dq],[p-_sage_const_1 ,q-_sage_const_1 ])
            e = inverse_mod(d,(p - _sage_const_1 )*(q - _sage_const_1 ))
            Alpha = float(log(e,N))
            Beta = float(log(p,N))
            Delta = float(log(dq,N))
            print("[+] N = ",N)
            print("[+] p = ",p)
            print("[+] q = ",q)
            print("[+] e =",e)
            print("[+] dq =",dq)
            print("[+] Alpha =",Alpha)
            print("[+] Beta =",Beta)
            print("[+] Delta =",Delta)
            assert pow(pow(_sage_const_3 ,e,N),d,N) == _sage_const_3 
            break
        except:
            continue
    return (N,e,Beta,Delta)



load("Attack/May03.sage")

MA = May03Attack(*keyGen(_sage_const_1024 ,_sage_const_0p3 ,_sage_const_0p05 ))
MA.attack(m = _sage_const_3 ,t = _sage_const_2 ,detail = True)

